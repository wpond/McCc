
INVENTORY_SERVER = 54

args = { ... }

home = {x=-255,y=69,z=171}
loc = {x=-255,y=69,z=171}
dir = 0
homeDir = 0

headings = {
	"north",
	"east",
	"south",
	"west"
}

xDiff = { 0, 1, 0, -1 }
zDiff = { -1, 0, 1, 0 }

turtle_cmds =  { 
	base_tl = turtle.turnLeft,
	base_tr = turtle.turnRight,
	base_tf = turtle.forward,
	base_tb = turtle.back,
	base_tu = turtle.up,
	base_td = turtle.down
}

function loadChests()
	
	rednet.send(INVENTORY_SERVER, "chests")
	
	id,msg = rednet.receive()
	chestInfo = textutils.unserialize(msg)
	
	print("Chests loaded: " ..tostring(#chestInfo.chests))
	
end

function printLocation()
	print("(x = " .. loc.x .. ", y = " .. loc.y .. ", z = " .. loc.z .. ")")
	print("Facing " .. headings[dir + 1])
end

function turnLeft()

	dir = (dir - 1) % 4;
	turtle_cmds.base_tl()
	
end

function turnRight()

	dir = (dir + 1) % 4;
	turtle_cmds.base_tr()
	
end

function up()
	
	while not turtle_cmds.base_tu() do end
	
	loc.y = loc.y + 1
	return true

end

function down()
	
	while not turtle_cmds.base_td() do end
	
	loc.y = loc.y - 1
	return true

end

function forward()
	
	while not turtle_cmds.base_tf() do end
	loc.x = loc.x + xDiff[dir+1]
	loc.z = loc.z + zDiff[dir+1]
	return true
	
end

function back()
	
	while not turtle_cmds.base_tb() do end
	loc.x = loc.x - xDiff[dir+1]
	loc.z = loc.z - zDiff[dir+1]
	return true
	
end

function face(target)
	while dir ~= target do
		turnLeft()
	end
end

function gotoY(y)
	
	if loc.y > y then
		while loc.y > y do
			if not down() then
				return false
			end
		end
	elseif loc.y < y then
		while loc.y < y do
			if not up() then
				return false
			end
		end
	end
	
	return true
	
end

function gotoZ(z)
	
	if loc.z > z then
		face(0)
		while loc.z > z do
			if not forward() then
				return false
			end
		end
	elseif loc.z < z then
		face(2)
		while loc.z < z do
			if not forward() then
				return false
			end
		end
	end
	
	return true
	
end

function gotoX(x)
	
	if loc.x < x then
		face(1)
		while loc.x < x do
			if not forward() then
				return false
			end
		end
	elseif loc.x > x then
		face(3)
		while loc.x > x do
			if not forward() then
				return false
			end
		end
	end
	
	return true
	
end

function gotoXZ(x,z)
	
	return gotoX(x) and gotoZ(z)
	
end

function gotoZX(x,z)
	
	return gotoZ(z) and gotoX(x)
	
end

function gotoChest(idx,side)
	
	local chest = chestInfo.chests[idx]
	
	local targetZ
	local targetFace
	
	if side == "front" then
		targetZ = chestInfo.sorterOrigin.z + chest.loc.z - 1
		targetFace = 2
	elseif side == "back" then
		targetZ = chestInfo.sorterOrigin.z + chest.loc.z + 1
		targetFace = 0
	else
		return
	end
	
	print("goto chest: " ..chest.desc.. "["..idx.."]")
	
	gotoY(chestInfo.sorterOrigin.y + chest.loc.y)
	
	if loc.z == targetZ then
		gotoX(chestInfo.sorterOrigin.x + chest.loc.x)
	else
		gotoX(chestInfo.sorterOrigin.x)
		gotoZX(chestInfo.sorterOrigin.x + chest.loc.x, targetZ)
	end
	
	face(targetFace)
	
end

function pickupUnsorted()
	
	gotoY(chestInfo.sorterOrigin.y + chestInfo.input.loc.y)
	
	if loc.z == chestInfo.sorterOrigin.z + chestInfo.input.loc.z then
		gotoX(chestInfo.sorterOrigin.x + chestInfo.input.loc.x)
	else
		gotoX(chestInfo.sorterOrigin.x)
		gotoZX(chestInfo.sorterOrigin.x + chestInfo.input.loc.x, chestInfo.sorterOrigin.z + chestInfo.input.loc.z)
	end
	
	face(chestInfo.input.face)
	
	turtle.select(1)
	
	-- wait for item to be placed
	if not turtle.suck() then 
		while not turtle.suck() do
			sleep(5)
		end
	end
	
	-- grab all items
	while turtle.suck() do end
	
	-- make sure comparison slot is clear
	if turtle.getItemCount(16) > 0 then
		turtle.select(16)
		turtle.drop()
	end
	
	gotoY(chestInfo.sorterOrigin.y)
	gotoXZ(chestInfo.sorterOrigin.x, chestInfo.sorterOrigin.z)
	
end

function sort()
	
	for i = 1,#chestInfo.chests do
		
		if not chestInfo.chests[i].empty then
			
			gotoChest(i,"back")
			turtle.select(16)
			turtle.suck()
			local empty = true
			local count = 0
			for j = 1,15 do
				
				if turtle.getItemCount(j) > 0 then
					empty = false
					
					turtle.select(j)
					if turtle.compareTo(16) then
						count = count + turtle.getItemCount(j)
						turtle.drop()
					end
					
				end
				
			end
			turtle.select(16)
			turtle.drop()
			
			if count > 0 then
				rednet.send(INVENTORY_SERVER,"checkin " .. count .. " " .. chestInfo.chests[i].desc)
			end
			
			if empty then
				return
			end
		
		end
		
	end
	
	gotoY(chestInfo.sorterOrigin.y + chestInfo.reject.loc.y)
	
	if loc.z == chestInfo.sorterOrigin.z + chestInfo.reject.loc.z then
		gotoX(chestInfo.sorterOrigin.x + chestInfo.reject.loc.x)
	else
		gotoX(chestInfo.sorterOrigin.x)
		gotoZX(chestInfo.sorterOrigin.x + chestInfo.reject.loc.x, chestInfo.sorterOrigin.z + chestInfo.reject.loc.z)
	end
	
	face(chestInfo.reject.face)
	
	for i = 1,15 do
		turtle.select(i)
		turtle.drop()
	end
	
end

function gotoOrigin()
	
	gotoY(chestInfo.sorterOrigin.y)
	gotoXZ(chestInfo.sorterOrigin.x, chestInfo.sorterOrigin.z)
	
end

function returnHome()
	
	print("returning home")
	
	gotoY(home.y)
	gotoX(chestInfo.sorterOrigin.x)
	gotoXZ(home.x,home.z)
	
	face(homeDir)
	
	print("home")
	
end

function usage()
	
	print("HouseBot v0.1")
	print("Usage: house <sort | fetch>")
	
end

function main(args)
	
	if #args ~= 1 then
		usage()
		return
	end
	
	rednet.close("right")
	rednet.open("right")
	
	loadChests()
	
	gotoOrigin()
	
	if args[1] == "sort" then
		
		pickupUnsorted()
		sort()
		
	elseif args[1] == "fetch" then
		
		
		
	end
	
	returnHome()
	
	rednet.close("right")
	
end

main(args)