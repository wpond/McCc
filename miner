
DEPTH = 11

home = {x=2,y=64,z=-1}
loc = {x=2,y=64,z=-1}
dir = 0
homeDir = 0

headings = {
	"north",
	"east",
	"south",
	"west"
}

xDiff = { 0, 1, 0, -1 }
zDiff = { -1, 0, 1, 0 }

turtle_cmds =  { 
	base_tl = turtle.turnLeft,
	base_tr = turtle.turnRight,
	base_tf = turtle.forward,
	base_tb = turtle.back,
	base_tu = turtle.up,
	base_td = turtle.down
}

function printLocation()
	print("(x = " .. loc.x .. ", y = " .. loc.y .. ", z = " .. loc.z .. ")")
	print("Facing " .. headings[dir + 1])
end

turtle.turnLeft = function()

	dir = (dir - 1) % 4;
	turtle_cmds.base_tl()
	
end

turtle.turnRight = function()

	dir = (dir + 1) % 4;
	turtle_cmds.base_tr()
	
end

turtle.up = function()

	if turtle_cmds.base_tu() then
		loc.y = loc.y + 1
		return true
	end
	
	return false

end

turtle.down = function()

	if turtle_cmds.base_td() then
		loc.y = loc.y - 1
		return true
	end
	
	return false

end

turtle.forward = function()
	
	if turtle_cmds.base_tf() then
		loc.x = loc.x + xDiff[dir+1]
		loc.z = loc.z + zDiff[dir+1]
		return true
	end
	
	return false
	
end

turtle.back = function()
	
	if turtle_cmds.base_tb() then
		loc.x = loc.x - xDiff[dir+1]
		loc.z = loc.z - zDiff[dir+1]
		return true
	end
	
	return false
	
end

function dig()
	turtle.dig()
	turtle.digDown()
	turtle.digUp()
end

function face(target)
	while dir ~= target do
		turtle.turnLeft()
	end
end

function goto(x,z)
	
	if loc.x < x then
		face(1)
		while loc.x < x do
			if not turtle.forward() then
				turtle.dig()
			end
			printLocation()
		end
	elseif loc.x > x then
		face(3)
		while loc.x > x do
			if not turtle.forward() then
				turtle.dig()
			end
			printLocation()
		end
	end
	
	if loc.z > z then
		face(0)
		while loc.z > z do
			if not turtle.forward() then
				turtle.dig()
			end
			printLocation()
		end
	elseif loc.z < z then
		face(2)
		while loc.z < z do
			if not turtle.forward() then
				turtle.dig()
			end
			printLocation()
		end
	end
	
end

function returnHome()
	
	print("return home")
	
	goto(home.x + 1,home.z)
	
	while loc.y < home.y do
		if not turtle.up() then
			turtle.digUp()
		end
	end
	
	face(3)
	while not turtle.forward() do end
	
end

rednet.close("right")
rednet.open("right")

while true do

	print("getting job")

	rednet.send(83,"getJob")
	id,msg = rednet.receive()
	if not msg == "yes" then
		print "no jobs"
		break
	end

	print("found job")

	id,msg = rednet.receive()
	startX = tonumber(msg)
	id,msg = rednet.receive()
	startZ = tonumber(msg)
	id,msg = rednet.receive()
	endX = tonumber(msg)
	id,msg = rednet.receive()
	endZ = tonumber(msg)

	print("(" .. startX .. "," .. startZ .. ") -> (" .. endX .. "," .. endZ .. ")")

	while loc.y > DEPTH + 1 do
		if not turtle.down() then
			turtle.digDown()
		end
	end

	print("At level " .. DEPTH)

	goto(startX, startZ)
	
	turtle.digUp()
	while not turtle.up() do
		turtle.digUp()
	end
	
	if endX < startX then
		xDir = 3
		xDist = startX - endX
	elseif endX > startX then
		xDir = 1
		xDist = endX - startX
	else
		xDist = 0
	end

	if endZ < startZ then
		yDir = 0
		yDist = startZ - endZ
	elseif endZ > startZ then
		yDir = 2
		yDist = endZ - startZ
	else
		yDir = 0
		yDist = 0
	end

	while yDist > 0 do
		
		face(xDir)
		
		if xDir == 1 then
			xDir = 3
		else
			xDir = 1
		end
		
		xToRun = xDist
		while xToRun > 0 do
			dig()
			if turtle.forward() then
				xToRun = xToRun - 1
			end
		end
		
		face(yDir)
		
		dig()
		while not turtle.forward() do
			dig()
		end
		
		yDist = yDist - 1
		
	end

	returnHome()

	face(homeDir)

	print("emptying")
	
	for i = 1,16 do
		turtle.select(i)
		turtle.drop()
	end
	
	print("done")

end

print("complete")
